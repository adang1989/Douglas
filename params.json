{"name":"Douglas","tagline":"Douglas PHP library for running Jasper Reports using their report REST API (v2)","body":"Douglas\r\n=======\r\n\r\n[![Build Status](https://travis-ci.org/zacharyrankin/Douglas.png?branch=master)](https://travis-ci.org/zacharyrankin/Douglas)\r\n\r\nDouglas PHP library for running Jasper Reports using their report REST API (v2)\r\n\r\n### Installing via Composer\r\n\r\nI recommend you install Douglas using [Composer](http://getcomposer.org).\r\n\r\n```bash\r\n# Install Composer\r\ncurl -sS https://getcomposer.org/installer | php\r\n\r\n# Add Douglas as a dependency\r\nphp composer.phar require zacharyrankin/Douglas:1.*\r\n```\r\n\r\nAfter installing, be sure to require Composer's autoload.php:\r\n\r\n```php\r\nrequire 'vendor/autoload.php';\r\n```\r\n\r\n### Installing via phar\r\n\r\nDownlad the [latest phar](https://github.com/zacharyrankin/Douglas/releases) and include it in your application\r\n\r\n```php\r\n<?php\r\nrequire 'douglas.phar';\r\n```\r\n\r\n### Usage\r\n\r\nHere is an extensive example of how I use this\r\n\r\n```php\r\n<?php\r\n\r\nuse \\Douglas\\Request\\Report as Report;\r\nuse \\Douglas\\Request\\Asset as Asset;\r\n\r\n// Add exception handling for invalid formats\r\n$format = Report::getFormat($_GET['format']);\r\n\r\n// I normally encrypt this and store it in the database and pass it around\r\n$jasper_url = 'http://jasperadmin:jasperadmin@localhost:8443/jasperserver/';\r\n\r\n// Create a new Report object that should point to a jasper report\r\n$report = new Report(\r\n    array(\r\n        'jasper_url' => $jasper_url,\r\n        // The report URL is the full resource path in Jasper\r\n        'report_url' => '/organizations/demo/Reports/TestReport',\r\n        // These parameters get passed automatically to your report, there \r\n        // are also some Jasper specific parameters you can pass as well\r\n        'parameters' => array(\r\n            'gender' => 'M',\r\n            'year'   => 2014\r\n        ),\r\n        // This is the format you want the report to be returned as\r\n        'format'     => $format,\r\n    )\r\n);\r\n\r\n// This can be used for storing reports locally before giving them to the user\r\n$file_name = \"{$report->getPrettyUrl()}.{$format}\";\r\n\r\n// Make the request to Jasper\r\n$report->send();\r\n\r\nif ($report->getError()) {\r\n    // Check to see if the request was successful or not\r\n    // and do something nice with the error\r\n}\r\n\r\nif (Report::FORMAT_HTML === $format) {\r\n    // This will request the HTML from jasper and run a callback on every\r\n    // asset jasper returns.  This is REQUIRED because the urls that jasper\r\n    // sends back are not web accessible and need to have the jsessionid \r\n    // cookie injected before being requested\r\n    $html = $report->getHtml(\r\n        function($asset_url, $jsessionid) use ($jasper_url) {\r\n\r\n            // I like to request every asset from jasper, re-save them \r\n            // locally so I can do caching, reloading, etc and not have \r\n            // to rely on Jasper\r\n            $asset = new Asset(\r\n                array(\r\n                    'jasper_url' => $jasper_url,\r\n                    'jsessionid' => $jsessionid,\r\n                    'asset_url'  => $asset_url,\r\n                )\r\n            );\r\n            $asset->send();\r\n\r\n            // I like to only save images, though Jasper will sometimes\r\n            // send back javascript files like jquery\r\n            if ($asset->getHeader('content-type') != 'image/png') {\r\n                return false;\r\n            }\r\n\r\n            $asset_file_name = sprintf('jasper_report_asset_%s', uniqid());\r\n            $full_asset_path = \"../images/{$asset_file_name}\";\r\n\r\n            $asset_fh = fopen($full_asset_path, 'w');\r\n            fwrite($asset_fh, $asset->getBody());\r\n            fclose($asset_fh);\r\n            return \"/{$asset_file_name}.png\";\r\n        }\r\n    );\r\n} else {\r\n    $body = $report->getBody();\r\n    // Output the PDF or Excel here\r\n}\r\n\r\n```\r\n\r\n### Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n#### Unit Testing\r\n\r\nInstall PHPUnit using composer `php composer.phar install --dev` and then you can run the tests using `vendor/bin/phpunit`\r\n\r\n#### Coding Standards\r\n\r\nStick to [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md)\r\n\r\nI recommend running [PHP Code Sniffer with PSR-2 Standards](https://github.com/klaussilveira/phpcs-psr) by running `phpcs --standard=PSR2 ./`\r\n\r\n","google":"UA-32799946-1","note":"Don't delete this file! It's used internally to help with page regeneration."}